import os
import sys

file_dir = os.path.dirname(__file__)
sys.path.append(file_dir)

from dotenv import load_dotenv
from discord.ext import commands
import discord

import trello_blacklist

load_dotenv()

TOKEN = os.getenv('DISCORD_TOKEN')
GUILD = os.getenv('DISCORD_GUILD')

bot = commands.Bot(command_prefix='!')

async def on_error(event, *args, **kwargs):
    with open('DiscordBlacklistBot.log', 'a') as f:
        if event == 'on_message':
            f.write(f'Unhandled message: {args[0]}\n')
        else:
            raise

@bot.event
async def on_ready():
    print(f'{bot.user.name} has connected to Discord!')

    for guild in bot.guilds:
        if guild.name == GUILD:
            break

    print(f'{guild.name} (id: {guild.id})\n')

#@bot.event
#async def on_command_error(ctx, error):
#    if isinstance(error, commands.errors.MissingRequiredArgument):
#        await ctx.send('You must include a user name to check when calling the blacklist bot.')

#@bot.command(name='blacklist', help='Checks the blacklist for a named user.')
#async def CheckBlacklist(ctx, *args):
#
#    UserName = " ".join(args[:])
#
#    response = trello_blacklist.check_user_in_blacklist(UserName)
#    await ctx.send(response)

@bot.event
async def on_message(message):
    if message.channel.name == "blacklist_check":
        if message.author.bot:
             return        
        if len(message.content) == 0:
            return
        else:
            UserName = message.content
            response = trello_blacklist.check_user_in_blacklist(UserName)
            await message.channel.send(response)

    await bot.process_commands(message)

bot.run(TOKEN)
